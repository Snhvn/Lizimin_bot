import discord
from discord.ext import commands
from discord import Embed, Colour
import requests
import time
import os
import json
import threading
from flask import Flask

# --- C·∫•u h√¨nh Bot Discord ---
intents = discord.Intents.default()
intents.message_content = True # R·∫•t quan tr·ªçng cho Prefix Commands
bot = commands.Bot(command_prefix="!", intents=intents) # ƒê·∫∑t prefix mong mu·ªën

# --- Web Server ƒë·ªÉ gi·ªØ Bot ho·∫°t ƒë·ªông ---
app = Flask(__name__)

@app.route("/")
def home():
    return "Bot is alive!"

def run_web_server():
    """Ch·∫°y web server trong m·ªôt thread ri√™ng."""
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 8080)), debug=False, use_reloader=False)

# Ch·∫°y web server trong thread ri√™ng
threading.Thread(target=run_web_server).start()

# --- C·∫•u h√¨nh API v√† URLs ---
API_TOKEN = os.environ.get('YEUMONEY_API_TOKEN', 'dfce079aa89e7256f53f6f2fe2328c128a584467f5afcbc5f5d451c581879768')
LINK_ORIGINAL = 'https://xumivnstore.site/callback.php'
HOSTING_BASE_URL = 'https://xumivnstore.site/'

# URLs cho Mail accounts
READ_MAIL_URL = HOSTING_BASE_URL + 'resources/read_mail.php'
WRITE_MAIL_URL = HOSTING_BASE_URL + 'resources/write_mail.php'

# URLs cho UG accounts
READ_UG_URL = HOSTING_BASE_URL + 'resources/read_ug.php'
WRITE_UG_URL = HOSTING_BASE_URL + 'resources/write_ug.php'

# URLs cho Red accounts
READ_RED_URL = HOSTING_BASE_URL + 'resources/read_red.php'
WRITE_RED_URL = HOSTING_BASE_URL + 'resources/write_red.php'

# URLs cho LD accounts
READ_LD_URL = HOSTING_BASE_URL + 'resources/read_ld.php'
WRITE_LD_URL = HOSTING_BASE_URL + 'resources/write_ld.php'

# URLs cho UGLocal (ch·ªâ code/t√†i kho·∫£n kh√¥ng m·∫≠t kh·∫©u)
READ_UGLOCAL_URL = HOSTING_BASE_URL + 'resources/read_uglocal.php'
WRITE_UGLOCAL_URL = HOSTING_BASE_URL + 'resources/write_uglocal.php'

# URLs cho Admin IDs
READ_ADMINS_URL = HOSTING_BASE_URL + 'resources/read_admins.php'
WRITE_ADMINS_URL = HOSTING_BASE_URL + 'resources/write_admins.php'

# URLs cho Used Keys
READ_USED_KEYS_URL = HOSTING_BASE_URL + 'resources/read_used_keys.php'
WRITE_USED_KEYS_URL = HOSTING_BASE_URL + 'resources/write_used_keys.php'

# --- H√†m T·∫£i/L∆∞u D·ªØ li·ªáu t·ª´ API ---
def load_data_from_api(url, default_value_type):
    """T·∫£i d·ªØ li·ªáu (t√†i kho·∫£n ho·∫∑c ID) t·ª´ URL API."""
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()
        if default_value_type == dict:
            return data if isinstance(data, dict) else {}
        elif default_value_type == set:
            return set(data) if isinstance(data, list) else set()
    except requests.exceptions.RequestException as e:
        print(f"L·ªói khi t·∫£i d·ªØ li·ªáu t·ª´ {url}: {e}")
    except json.JSONDecodeError as e:
        print(f"L·ªói gi·∫£i m√£ JSON t·ª´ {url}: {e}")
    return default_value_type()

def save_data_from_api(url, data):
    """L∆∞u d·ªØ li·ªáu (t√†i kho·∫£n ho·∫∑c ID) v√†o URL API."""
    try:
        json_data = list(data) if isinstance(data, set) else data
        response = requests.post(url, json=json_data, timeout=10)
        response.raise_for_status()
        result = response.json()
        if result.get('status') != 'success':
            print(f"L·ªói khi l∆∞u d·ªØ li·ªáu v√†o {url}: {result.get('message', 'L·ªói kh√¥ng x√°c ƒë·ªãnh')}")
    except requests.exceptions.RequestException as e:
        print(f"L·ªói khi l∆∞u d·ªØ li·ªáu v√†o {url}: {e}")
    except json.JSONDecodeError as e:
        print(f"L·ªói gi·∫£i m√£ JSON khi l∆∞u v√†o {url}: {e}")

# --- Kh·ªüi t·∫°o D·ªØ li·ªáu To√†n c·ª•c ---
accounts_mail = load_data_from_api(READ_MAIL_URL, dict)
accounts_ug = load_data_from_api(READ_UG_URL, dict)
accounts_red = load_data_from_api(READ_RED_URL, dict)
accounts_ld = load_data_from_api(READ_LD_URL, dict)
# accounts_uglocal s·∫Ω l∆∞u c√°c ƒëo·∫°n code, d√πng set ƒë·ªÉ l∆∞u tr·ªØ c√°c ƒëo·∫°n code duy nh·∫•t
accounts_uglocal = load_data_from_api(READ_UGLOCAL_URL, set) 

admin_ids = load_data_from_api(READ_ADMINS_URL, set)
used_keys = load_data_from_api(READ_USED_KEYS_URL, set)

# ƒê·∫∂T ID DISCORD C·ª¶A B·∫†N V√ÄO ƒê√ÇY ƒê·ªÇ L√ÄM ADMIN CH√çNH
MAIN_ADMIN_ID = 1375561305553109110 # Thay th·∫ø b·∫±ng ID c·ªßa b·∫°n
if MAIN_ADMIN_ID not in admin_ids:
    admin_ids.add(MAIN_ADMIN_ID)
    save_data_from_api(WRITE_ADMINS_URL, admin_ids) 

def is_admin(user_id):
    return user_id in admin_ids

# --- S·ª± ki·ªán Bot S·∫µn s√†ng ---
@bot.event
async def on_ready():
    print(f"Bot ƒë√£ ƒëƒÉng nh·∫≠p: {bot.user}")
    await bot.change_presence(activity=discord.Game(name="Ph·ª•c v·ª• sever Xumi"))

# --- X·ª≠ l√Ω l·ªói Cooldown ---
@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandOnCooldown):
        remaining_time = round(error.retry_after, 1)
        # Gi·ªØ nguy√™n g·ª≠i tin nh·∫Øn l·ªói cooldown c√¥ng khai
        await ctx.send(f"**‚è∞ Vui l√≤ng ch·ªù {remaining_time} gi√¢y tr∆∞·ªõc khi s·ª≠ d·ª•ng l·ªánh n√†y l·∫ßn n·ªØa.**", delete_after=5)
    elif isinstance(error, commands.MissingRequiredArgument):
        # Gi·ªØ nguy√™n g·ª≠i tin nh·∫Øn l·ªói c√¥ng khai
        await ctx.send(f"B·∫°n thi·∫øu ƒë·ªëi s·ªë c·∫ßn thi·∫øt cho l·ªánh n√†y. Vui l√≤ng ki·ªÉm tra l·∫°i c√∫ ph√°p. (L·ªói: {error})")
    elif isinstance(error, commands.BadArgument):
        # Gi·ªØ nguy√™n g·ª≠i tin nh·∫Øn l·ªói c√¥ng khai
        await ctx.send(f"ƒê·ªëi s·ªë b·∫°n cung c·∫•p kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i. (L·ªói: {error})")
    else:
        print(f"L·ªói kh√¥ng mong mu·ªën x·∫£y ra: {error}")
        # await ctx.send(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi th·ª±c thi l·ªánh: {error}")

# --- L·ªánh `!info` (Gi·ªõi thi·ªáu bot v√† c√°c l·ªánh) ---
@bot.command(name="info", help="Gi·ªõi thi·ªáu v·ªÅ bot v√† c√°c l·ªánh kh·∫£ d·ª•ng.")
@commands.cooldown(1, 5, commands.BucketType.user) # 1 l·∫ßn d√πng m·ªói 5 gi√¢y cho m·ªói ng∆∞·ªùi d√πng
async def info(ctx: commands.Context):
    is_admin_user = is_admin(ctx.author.id)

    description = (
        "**L·ªánh d√†nh cho ng∆∞·ªùi d√πng:**\n"
        "``!getkey`` - L·∫•y link key r√∫t g·ªçn ƒë·ªÉ nh·∫≠n t√†i kho·∫£n.\n"
        "``!gmail <key>`` - L·∫•y t√†i kho·∫£n Email.\n"
        "``!ugphone <key>`` - L·∫•y t√†i kho·∫£n UGPhone.\n"
        "``!redfinger <key>`` - L·∫•y t√†i kho·∫£n RedFinger.\n"
        "``!ldcloud <key>`` - L·∫•y t√†i kho·∫£n LD Cloud.\n"
        "``!uglocal <key>`` - L·∫•y ƒëo·∫°n code/t√†i kho·∫£n UGLocal (ch·ªâ t√†i kho·∫£n, kh√¥ng m·∫≠t kh·∫©u).\n" # Th√™m l·ªánh m·ªõi
    )
    if is_admin_user:
        description += (
            "\n**L·ªánh d√†nh cho Admin:**\n"
            "``!upgmail <email> <password>`` - Th√™m t√†i kho·∫£n Email.\n"
            "``!upugphone <email> <password>`` - Th√™m t√†i kho·∫£n UGPhone.\n"
            "``!upredfinger <email> <password>`` - Th√™m t√†i kho·∫£n RedFinger.\n"
            "``!upldcloud <email> <password>`` - Th√™m t√†i kho·∫£n LD Cloud.\n"
            "``!upuglocal <code_string>`` - Th√™m ƒëo·∫°n code/t√†i kho·∫£n UGLocal (ch·ªâ t√†i kho·∫£n/code, kh√¥ng m·∫≠t kh·∫©u).\n" # Th√™m l·ªánh admin m·ªõi
            "``!listgmail`` - Xem danh s√°ch t√†i kho·∫£n Email c√≤n l·∫°i.\n"
            "``!listugphone`` - Xem danh s√°ch t√†i kho·∫£n UGPhone c√≤n l·∫°i.\n"
            "``!listredfinger`` - Xem danh s√°ch t√†i kho·∫£n RedFinger c√≤n l·∫°i.\n"
            "``!listldcloud`` - Xem danh s√°ch t√†i kho·∫£n LD Cloud c√≤n l·∫°i.\n"
            "``!listuglocal`` - Xem danh s√°ch ƒëo·∫°n code/t√†i kho·∫£n UGLocal c√≤n l·∫°i.\n" # Th√™m l·ªánh admin m·ªõi
            "``!dellgmail <email>`` - X√≥a t√†i kho·∫£n Email.\n"
            "``!dellugphone <email>`` - X√≥a t√†i kho·∫£n UGPhone.\n"
            "``!dellredfinger <email>`` - X√≥a t√†i kho·∫£n RedFinger.\n"
            "``!delldcloud <email>`` - X√≥a t√†i kho·∫£n LD Cloud.\n"
            "``!deluglocal <code_string>`` - X√≥a ƒëo·∫°n code/t√†i kho·∫£n UGLocal.\n" # Th√™m l·ªánh admin m·ªõi
            "``!setowner <user_mention_or_id>`` - Th√™m admin m·ªõi.\n"
            "``!delowner <user_mention_or_id>`` - G·ª° admin.\n"
            "``!listadmin`` - Xem danh s√°ch admin.\n"
        )
    embed = Embed(
        title="ü§ñ Th√¥ng tin Bot v√† C√°c L·ªánh",
        description=description,
        color=Colour(0xAA00FF)
    )
    embed.set_thumbnail(url=bot.user.avatar.url if bot.user.avatar else None)
    embed.set_image(url="https://i.imgur.com/WFeKMG6.gif")

    view = discord.ui.View()
    join_server_button = discord.ui.Button(
        label="Tham gia Server H·ªó Tr·ª£",
        style=discord.ButtonStyle.link,
        url="https://discord.gg/Rgr7vCXwu2"
    )
    view.add_item(join_server_button)

    await ctx.send(embed=embed, view=view)

# --- L·ªánh `!getkey` (L·∫•y link key) ---
@bot.command(name="getkey", help="L·∫•y link key r√∫t g·ªçn ƒë·ªÉ s·ª≠ d·ª•ng c√°c l·ªánh kh√°c.")
@commands.cooldown(1, 5, commands.BucketType.user) # 1 l·∫ßn d√πng m·ªói 5 gi√¢y cho m·ªói ng∆∞·ªùi d√πng
async def getkey(ctx: commands.Context):
    user_id = str(ctx.author.id)
    try:
        unique_link = f"{LINK_ORIGINAL}?uid={user_id}&t={int(time.time())}"
        encoded_link = requests.utils.quote(unique_link, safe='')
        api_url = f"https://yeumoney.com/QL_api.php?token={API_TOKEN}&url={encoded_link}&format=json"
        
        res = requests.get(api_url, timeout=10)
        res.raise_for_status()
        data = res.json()

        if data.get("status") == "success":
            short_url = data.get("shortenedUrl")
            if short_url:
                # G·ª≠i link key v√†o DM
                await ctx.author.send(
                    f"**üîó Link key r√∫t g·ªçn c·ªßa b·∫°n:**\n{short_url}\n"
                    f"Vui l√≤ng truy c·∫≠p link n√†y ƒë·ªÉ l·∫•y key v√† s·ª≠ d·ª•ng c√°c l·ªánh kh√°c."
                )
                # Th√¥ng b√°o trong k√™nh r·∫±ng ƒë√£ g·ª≠i DM
                await ctx.send(f"**{ctx.author.mention}**, link key c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i qua tin nh·∫Øn ri√™ng t∆∞ (DM)! Vui l√≤ng ki·ªÉm tra DM c·ªßa b·∫°n.")
            else:
                # G·ª≠i l·ªói v√†o DM
                await ctx.author.send(f"**L·ªói API:** Kh√¥ng nh·∫≠n ƒë∆∞·ª£c shortened URL.")
                await ctx.send(f"**{ctx.author.mention}**, c√≥ l·ªói khi l·∫•y link key, vui l√≤ng ki·ªÉm tra DM c·ªßa b·∫°n ƒë·ªÉ bi·∫øt chi ti·∫øt.")
        else:
            # G·ª≠i l·ªói v√†o DM
            await ctx.author.send(f"**L·ªói API:** {data.get('message', 'L·ªói kh√¥ng x√°c ƒë·ªãnh t·ª´ API r√∫t g·ªçn.')}")
            await ctx.send(f"**{ctx.author.mention}**, c√≥ l·ªói khi l·∫•y link key, vui l√≤ng ki·ªÉm tra DM c·ªßa b·∫°n ƒë·ªÉ bi·∫øt chi ti·∫øt.")
    except requests.exceptions.RequestException as e:
        # G·ª≠i l·ªói v√†o DM
        await ctx.author.send(f"**L·ªói k·∫øt n·ªëi API r√∫t g·ªçn:** Vui l√≤ng th·ª≠ l·∫°i sau. ({e})")
        await ctx.send(f"**{ctx.author.mention}**, c√≥ l·ªói k·∫øt n·ªëi khi l·∫•y link key, vui l√≤ng ki·ªÉm tra DM c·ªßa b·∫°n ƒë·ªÉ bi·∫øt chi ti·∫øt.")
    except json.JSONDecodeError:
        # G·ª≠i l·ªói v√†o DM
        await ctx.author.send(f"**L·ªói gi·∫£i m√£ d·ªØ li·ªáu t·ª´ API r√∫t g·ªçn.**")
        await ctx.send(f"**{ctx.author.mention}**, c√≥ l·ªói khi gi·∫£i m√£ d·ªØ li·ªáu, vui l√≤ng ki·ªÉm tra DM c·ªßa b·∫°n ƒë·ªÉ bi·∫øt chi ti·∫øt.")
    except Exception as e:
        # G·ª≠i l·ªói v√†o DM
        await ctx.author.send(f"**L·ªói h·ªá th·ªëng kh√¥ng mong mu·ªën:** {e}")
        await ctx.send(f"**{ctx.author.mention}**, ƒë√£ x·∫£y ra l·ªói h·ªá th·ªëng, vui l√≤ng ki·ªÉm tra DM c·ªßa b·∫°n ƒë·ªÉ bi·∫øt chi ti·∫øt.")

# --- Ki·ªÉm tra Key H·ª£p L·ªá ---
async def check_key_valid(ctx: commands.Context, key: str) -> bool:
    """Ki·ªÉm tra xem key c√≥ h·ª£p l·ªá v√† ch∆∞a ƒë∆∞·ª£c s·ª≠ d·ª•ng kh√¥ng."""
    try:
        res = requests.get("https://xumivnstore.site/keys.json", timeout=10)
        res.raise_for_status()
        key_data = res.json()
    except requests.exceptions.RequestException as e:
        # Gi·ªØ tin nh·∫Øn l·ªói key c√¥ng khai ƒë·ªÉ ng∆∞·ªùi kh√°c bi·∫øt key ƒë√≥ kh√¥ng h·ª£p l·ªá
        await ctx.send(f"L·ªói khi ki·ªÉm tra key t·ª´ m√°y ch·ªß: {e}")
        return False
    except json.JSONDecodeError as e:
        # Gi·ªØ tin nh·∫Øn l·ªói key c√¥ng khai
        await ctx.send(f"L·ªói gi·∫£i m√£ JSON t·ª´ keys.json: {e}. Vui l√≤ng ki·ªÉm tra file keys.json tr√™n hosting.")
        return False

    if key not in key_data:
        # Gi·ªØ tin nh·∫Øn l·ªói key c√¥ng khai
        await ctx.send(f"**Key `{key}` kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng t·ªìn t·∫°i.**")
        return False
    if key in used_keys:
        # Gi·ªØ tin nh·∫Øn l·ªói key c√¥ng khai
        await ctx.send(f"**Key `{key}` ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ l·∫•y t√†i kho·∫£n kh√°c.**")
        return False
    return True

# --- H√†m C·∫•p T√†i Kho·∫£n Chung (D√†nh cho Ng∆∞·ªùi d√πng) ---
async def give_account(ctx: commands.Context, key: str, accounts_dict: dict, account_type: str, write_url: str):
    """C·∫•p m·ªôt t√†i kho·∫£n (email:password) cho ng∆∞·ªùi d√πng n·∫øu key h·ª£p l·ªá v√† t√†i kho·∫£n c√≤n."""
    if not await check_key_valid(ctx, key):
        return

    if not accounts_dict:
        # Gi·ªØ tin nh·∫Øn h·∫øt t√†i kho·∫£n c√¥ng khai ƒë·ªÉ ng∆∞·ªùi kh√°c bi·∫øt
        await ctx.send(f"**Kh√¥ng c√≤n t√†i kho·∫£n {account_type} ƒë·ªÉ c·∫•p.**")
        return
    
    try:
        # L·∫•y m·ªôt t√†i kho·∫£n ng·∫´u nhi√™n v√† x√≥a kh·ªèi danh s√°ch
        email, password = accounts_dict.popitem()
        
        # Th√™m key v√†o danh s√°ch ƒë√£ s·ª≠ d·ª•ng
        used_keys.add(key)
        save_data_from_api(WRITE_USED_KEYS_URL, used_keys)

        # L∆∞u l·∫°i danh s√°ch t√†i kho·∫£n ƒë√£ c·∫≠p nh·∫≠t
        save_data_from_api(write_url, accounts_dict)
        
        # G·ª¨I TIN NH·∫ÆN T√ÄI KHO·∫¢N V√ÄO DM C·ª¶A NG∆Ø·ªúI D√ôNG
        await ctx.author.send(
            f"**‚úÖ T√†i kho·∫£n {account_type} cho key `{key}` c·ªßa b·∫°n:**\n"
            f"Email: ``{email}``\nM·∫≠t kh·∫©u: ``{password}``\n"
            f"H√£y ƒë·ªïi m·∫≠t kh·∫©u ngay sau khi nh·∫≠n ƒë∆∞·ª£c t√†i kho·∫£n ƒë·ªÉ b·∫£o m·∫≠t!"
        )
        # TH√îNG B√ÅO NG·∫ÆN G·ªåN TRONG K√äNH CHAT
        await ctx.send(f"**{ctx.author.mention}**, t√†i kho·∫£n {account_type} c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i qua tin nh·∫Øn ri√™ng t∆∞ (DM)! Vui l√≤ng ki·ªÉm tra DM c·ªßa b·∫°n.")

    except Exception as e:
        # G·ª≠i l·ªói v√†o DM
        await ctx.author.send(f"**L·ªói khi c·∫•p t√†i kho·∫£n {account_type}:** {e}")
        await ctx.send(f"**{ctx.author.mention}**, ƒë√£ x·∫£y ra l·ªói khi c·∫•p t√†i kho·∫£n, vui l√≤ng ki·ªÉm tra DM c·ªßa b·∫°n ƒë·ªÉ bi·∫øt chi ti·∫øt.")


# --- H√†m C·∫•p Code/T√†i Kho·∫£n Ch·ªâ T√†i Kho·∫£n (D√†nh cho Ng∆∞·ªùi d√πng) ---
async def give_single_account(ctx: commands.Context, key: str, accounts_set: set, account_type: str, write_url: str):
    """C·∫•p m·ªôt ƒëo·∫°n code/t√†i kho·∫£n (ch·ªâ t√†i kho·∫£n/email, kh√¥ng m·∫≠t kh·∫©u) cho ng∆∞·ªùi d√πng n·∫øu key h·ª£p l·ªá v√† t√†i kho·∫£n c√≤n."""
    if not await check_key_valid(ctx, key):
        return

    if not accounts_set:
        # Gi·ªØ tin nh·∫Øn h·∫øt code/t√†i kho·∫£n c√¥ng khai
        await ctx.send(f"**Kh√¥ng c√≤n ƒëo·∫°n code/t√†i kho·∫£n {account_type} ƒë·ªÉ c·∫•p.**") 
        return
    
    try:
        # L·∫•y m·ªôt ƒëo·∫°n code/t√†i kho·∫£n ng·∫´u nhi√™n t·ª´ set v√† x√≥a kh·ªèi danh s√°ch
        account_data = accounts_set.pop() 
        
        # Th√™m key v√†o danh s√°ch ƒë√£ s·ª≠ d·ª•ng
        used_keys.add(key)
        save_data_from_api(WRITE_USED_KEYS_URL, used_keys)

        # L∆∞u l·∫°i danh s√°ch code/t√†i kho·∫£n ƒë√£ c·∫≠p nh·∫≠t
        save_data_from_api(write_url, accounts_set) 
        
        # G·ª¨I TIN NH·∫ÆN CODE/T√ÄI KHO·∫¢N V√ÄO DM C·ª¶A NG∆Ø·ªúI D√ôNG
        await ctx.author.send(
            f"**‚úÖ ƒêo·∫°n code/t√†i kho·∫£n {account_type} cho key `{key}` c·ªßa b·∫°n:**\n"
            f"```\n{account_data}\n```\n" 
            f"Vui l√≤ng s·ª≠ d·ª•ng ƒëo·∫°n code/t√†i kho·∫£n n√†y!"
        )
        # TH√îNG B√ÅO NG·∫ÆN G·ªåN TRONG K√äNH CHAT
        await ctx.send(f"**{ctx.author.mention}**, ƒëo·∫°n code/t√†i kho·∫£n {account_type} c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i qua tin nh·∫Øn ri√™ng t∆∞ (DM)! Vui l√≤ng ki·ªÉm tra DM c·ªßa b·∫°n.")

    except KeyError: # N·∫øu set r·ªóng gi·ªØa ch·ª´ng
        # Gi·ªØ tin nh·∫Øn h·∫øt code/t√†i kho·∫£n c√¥ng khai
        await ctx.send(f"**Kh√¥ng c√≤n ƒëo·∫°n code/t√†i kho·∫£n {account_type} ƒë·ªÉ c·∫•p.**")
    except Exception as e:
        # G·ª≠i l·ªói v√†o DM
        await ctx.author.send(f"**L·ªói khi c·∫•p ƒëo·∫°n code/t√†i kho·∫£n {account_type}:** {e}")
        await ctx.send(f"**{ctx.author.mention}**, ƒë√£ x·∫£y ra l·ªói khi c·∫•p ƒëo·∫°n code/t√†i kho·∫£n, vui l√≤ng ki·ªÉm tra DM c·ªßa b·∫°n ƒë·ªÉ bi·∫øt chi ti·∫øt.")

# --- ƒê·ªãnh nghƒ©a c√°c Prefix Command ƒë·ªÉ l·∫•y t√†i kho·∫£n ---
# C√°c l·ªánh n√†y s·∫Ω g·ªçi h√†m give_account ho·∫∑c give_single_account ƒë√£ s·ª≠a ƒë·ªïi
@bot.command(name="gmail", help="Nh·∫≠n t√†i kho·∫£n Email b·∫±ng key duy nh·∫•t.")
@commands.cooldown(1, 5, commands.BucketType.user) # 1 l·∫ßn d√πng m·ªói 5 gi√¢y cho m·ªói ng∆∞·ªùi d√πng
async def gmail(ctx: commands.Context, key: str):
    await give_account(ctx, key, accounts_mail, "Email", WRITE_MAIL_URL)

@bot.command(name="ugphone", help="Nh·∫≠n t√†i kho·∫£n UGPhone b·∫±ng key duy nh·∫•t.")
@commands.cooldown(1, 5, commands.BucketType.user) # 1 l·∫ßn d√πng m·ªói 5 gi√¢y cho m·ªói ng∆∞·ªùi d√πng
async def ugphone(ctx: commands.Context, key: str):
    await give_account(ctx, key, accounts_ug, "UGPhone", WRITE_UG_URL)

@bot.command(name="redfinger", help="Nh·∫≠n t√†i kho·∫£n RedFinger Cloud b·∫±ng key duy nh·∫•t.")
@commands.cooldown(1, 5, commands.BucketType.user) # 1 l·∫ßn d√πng m·ªói 5 gi√¢y cho m·ªói ng∆∞·ªùi d√πng
async def redfinger(ctx: commands.Context, key: str):
    await give_account(ctx, key, accounts_red, "RedFinger", WRITE_RED_URL)

@bot.command(name="ldcloud", help="Nh·∫≠n t√†i kho·∫£n LD Cloud b·∫±ng key duy nh·∫•t.")
@commands.cooldown(1, 5, commands.BucketType.user) # 1 l·∫ßn d√πng m·ªói 5 gi√¢y cho m·ªói ng∆∞·ªùi d√πng
async def ldcloud(ctx: commands.Context, key: str):
    await give_account(ctx, key, accounts_ld, "LD Cloud", WRITE_LD_URL)

@bot.command(name="uglocal", help="Nh·∫≠n ƒëo·∫°n code/t√†i kho·∫£n UGLocal (ch·ªâ t√†i kho·∫£n) b·∫±ng key duy nh·∫•t.")
@commands.cooldown(1, 5, commands.BucketType.user)
async def uglocal(ctx: commands.Context, key: str):
    await give_single_account(ctx, key, accounts_uglocal, "UGLocal", WRITE_UGLOCAL_URL)

# --- H√†m Upload T√†i Kho·∫£n Chung (D√†nh cho Admin) ---
async def admin_upload_account(ctx: commands.Context, email: str, password: str, accounts_dict: dict, account_type: str, write_url: str):
    """Th√™m t√†i kho·∫£n (email:password) m·ªõi v√†o danh s√°ch."""
    if not is_admin(ctx.author.id):
        await ctx.send("B·∫°n kh√¥ng c√≥ quy·ªÅn d√πng l·ªánh n√†y.")
        return

    if email in accounts_dict:
        await ctx.send(f"**Email `{email}` ƒë√£ t·ªìn t·∫°i trong {account_type}.**")
        return
    
    accounts_dict[email] = password
    save_data_from_api(write_url, accounts_dict)
    await ctx.send(
        f"**‚úÖ ƒê√£ th√™m t√†i kho·∫£n {account_type}:**\nEmail: ``{email}``\nM·∫≠t kh·∫©u: ``{password}``"
    )

# --- H√†m Upload Code/T√†i Kho·∫£n Ch·ªâ T√†i Kho·∫£n (D√†nh cho Admin) ---
async def admin_upload_single_account(ctx: commands.Context, account_string: str, accounts_set: set, account_type: str, write_url: str):
    """Th√™m m·ªôt ƒëo·∫°n code/t√†i kho·∫£n (ch·ªâ t√†i kho·∫£n/email, kh√¥ng m·∫≠t kh·∫©u) m·ªõi v√†o danh s√°ch."""
    if not is_admin(ctx.author.id):
        await ctx.send("B·∫°n kh√¥ng c√≥ quy·ªÅn d√πng l·ªánh n√†y.")
        return

    if account_string in accounts_set:
        await ctx.send(f"**ƒêo·∫°n code/t√†i kho·∫£n `{account_string}` ƒë√£ t·ªìn t·∫°i trong {account_type}.**")
        return
    
    accounts_set.add(account_string)
    save_data_from_api(write_url, accounts_set)
    await ctx.send(
        f"**‚úÖ ƒê√£ th√™m ƒëo·∫°n code/t√†i kho·∫£n {account_type}:** ``{account_string}``"
    )

# --- ƒê·ªãnh nghƒ©a c√°c Prefix Command ƒë·ªÉ upload t√†i kho·∫£n (Admin) ---
# Th∆∞·ªùng c√°c l·ªánh admin kh√¥ng c·∫ßn cooldown, nh∆∞ng c√≥ th·ªÉ th√™m n·∫øu mu·ªën
@bot.command(name="upgmail", help="(Admin) Th√™m t√†i kho·∫£n Email m·ªõi.")
async def upgmail(ctx: commands.Context, email: str, password: str):
    await admin_upload_account(ctx, email, password, accounts_mail, "Email", WRITE_MAIL_URL)

@bot.command(name="upugphone", help="(Admin) Th√™m t√†i kho·∫£n UGPhone m·ªõi.")
async def upugphone(ctx: commands.Context, email: str, password: str):
    await admin_upload_account(ctx, email, password, accounts_ug, "UGPhone", WRITE_UG_URL)

@bot.command(name="upredfinger", help="(Admin) Th√™m t√†i kho·∫£n RedFonger m·ªõi.")
async def upredfinger(ctx: commands.Context, email: str, password: str):
    await admin_upload_account(ctx, email, password, accounts_red, "RedFinger", WRITE_RED_URL)

@bot.command(name="upldcloud", help="(Admin) Th√™m t√†i kho·∫£n LD Cloud m·ªõi.")
async def upldcloud(ctx: commands.Context, email: str, password: str):
    await admin_upload_account(ctx, email, password, accounts_ld, "LD Cloud", WRITE_LD_URL)

@bot.command(name="upuglocal", help="(Admin) Th√™m ƒëo·∫°n code/t√†i kho·∫£n UGLocal m·ªõi.")
async def upuglocal(ctx: commands.Context, *, account_string: str): # D√πng *, ƒë·ªÉ l·∫•y c·∫£ chu·ªói d√†i
    await admin_upload_single_account(ctx, account_string, accounts_uglocal, "UGLocal", WRITE_UGLOCAL_URL)

# --- H√†m List T√†i Kho·∫£n Chung (D√†nh cho Admin) ---
async def admin_list_accounts(ctx: commands.Context, accounts_dict: dict, account_type: str):
    """Li·ªát k√™ t·∫•t c·∫£ c√°c t√†i kho·∫£n c√≤n l·∫°i trong m·ªôt lo·∫°i c·ª• th·ªÉ."""
    if not is_admin(ctx.author.id):
        await ctx.send("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.")
        return

    if not accounts_dict:
        await ctx.send(f"**Kh√¥ng c√≤n t√†i kho·∫£n {account_type} n√†o.**")
        return
    
    message = f"**Danh s√°ch t√†i kho·∫£n {account_type} c√≤n l·∫°i ({len(accounts_dict)} t√†i kho·∫£n):**\n"
    current_length = len(message)
    max_length = 1900

    for email in accounts_dict:
        line = f"- ``{email}``\n"
        if current_length + len(line) > max_length:
            await ctx.send(message)
            message = line
            current_length = len(line)
        else:
            message += line
            current_length += len(line)
    
    if message:
        await ctx.send(message)

# --- H√†m List Code/T√†i Kho·∫£n Ch·ªâ T√†i Kho·∫£n (D√†nh cho Admin) ---
async def admin_list_single_accounts(ctx: commands.Context, accounts_set: set, account_type: str):
    """Li·ªát k√™ t·∫•t c·∫£ c√°c ƒëo·∫°n code/t√†i kho·∫£n (ch·ªâ t√†i kho·∫£n) c√≤n l·∫°i trong m·ªôt lo·∫°i c·ª• th·ªÉ."""
    if not is_admin(ctx.author.id):
        await ctx.send("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.")
        return

    if not accounts_set:
        await ctx.send(f"**Kh√¥ng c√≤n ƒëo·∫°n code/t√†i kho·∫£n {account_type} n√†o.**")
        return
    
    message = f"**Danh s√°ch ƒëo·∫°n code/t√†i kho·∫£n {account_type} c√≤n l·∫°i ({len(accounts_set)} ƒëo·∫°n):**\n"
    current_length = len(message)
    max_length = 1900

    for account_data in accounts_set:
        line = f"- ```{account_data[:50]}...```\n" # Hi·ªÉn th·ªã 50 k√Ω t·ª± ƒë·∫ßu ƒë·ªÉ tr√°nh qu√° d√†i
        if current_length + len(line) > max_length:
            await ctx.send(message)
            message = line
            current_length = len(line)
        else:
            message += line
            current_length += len(line)
    
    if message:
        await ctx.send(message)

# --- ƒê·ªãnh nghƒ©a c√°c Prefix Command ƒë·ªÉ list t√†i kho·∫£n (Admin) ---
@bot.command(name="listgmail", help="(Admin) Xem danh s√°ch t√†i kho·∫£n Email c√≤n l·∫°i.")
async def listgmail(ctx: commands.Context):
    await admin_list_accounts(ctx, accounts_mail, "Email")

@bot.command(name="listugphone", help="(Admin) Xem danh s√°ch t√†i kho·∫£n UGPhone c√≤n l·∫°i.")
async def listugphone(ctx: commands.Context):
    await admin_list_accounts(ctx, accounts_ug, "UGPhone")

@bot.command(name="listredfinger", help="(Admin) Xem danh s√°ch t√†i kho·∫£n RedFinger c√≤n l·∫°i.")
async def listredfinger(ctx: commands.Context):
    await admin_list_accounts(ctx, accounts_red, "RedFinger")

@bot.command(name="listldcloud", help="(Admin) Xem danh s√°ch t√†i kho·∫£n LD Cloud c√≤n l·∫°i.")
async def listldcloud(ctx: commands.Context):
    await admin_list_accounts(ctx, accounts_ld, "LD Cloud")

@bot.command(name="listuglocal", help="(Admin) Xem danh s√°ch ƒëo·∫°n code/t√†i kho·∫£n UGLocal c√≤n l·∫°i.")
async def listuglocal(ctx: commands.Context):
    await admin_list_single_accounts(ctx, accounts_uglocal, "UGLocal")

# --- H√†m X√≥a T√†i Kho·∫£n Chung (D√†nh cho Admin) ---
async def admin_delete_account(ctx: commands.Context, email: str, accounts_dict: dict, account_type: str, write_url: str):
    """X√≥a m·ªôt t√†i kho·∫£n (email:password) kh·ªèi danh s√°ch."""
    if not is_admin(ctx.author.id):
        await ctx.send("B·∫°n kh√¥ng c√≥ quy·ªÅn d√πng l·ªánh n√†y.")
        return

    if email not in accounts_dict:
        await ctx.send(f"**Email `{email}` kh√¥ng t·ªìn t·∫°i trong {account_type}.**")
        return
    
    del accounts_dict[email]
    save_data_from_api(write_url, accounts_dict)
    await ctx.send(
        f"**‚úÖ ƒê√£ x√≥a t√†i kho·∫£n {account_type} v·ªõi email ``{email}``.**"
    )

# --- H√†m X√≥a Code/T√†i Kho·∫£n Ch·ªâ T√†i Kho·∫£n (D√†nh cho Admin) ---
async def admin_delete_single_account(ctx: commands.Context, account_string: str, accounts_set: set, account_type: str, write_url: str):
    """X√≥a m·ªôt ƒëo·∫°n code/t√†i kho·∫£n (ch·ªâ t√†i kho·∫£n) kh·ªèi danh s√°ch."""
    if not is_admin(ctx.author.id):
        await ctx.send("B·∫°n kh√¥ng c√≥ quy·ªÅn d√πng l·ªánh n√†y.")
        return

    if account_string not in accounts_set:
        await ctx.send(f"**ƒêo·∫°n code/t√†i kho·∫£n `{account_string}` kh√¥ng t·ªìn t·∫°i trong {account_type}.**")
        return
    
    accounts_set.remove(account_string) # D√πng remove cho set
    save_data_from_api(write_url, accounts_set)
    await ctx.send(
        f"**‚úÖ ƒê√£ x√≥a ƒëo·∫°n code/t√†i kho·∫£n {account_type}: ``{account_string}``.**"
    )

# --- ƒê·ªãnh nghƒ©a c√°c Prefix Command ƒë·ªÉ x√≥a t√†i kho·∫£n (Admin) ---
@bot.command(name="dellgmail", help="(Admin) X√≥a t√†i kho·∫£n Gmail.")
async def dellgmail(ctx: commands.Context, email: str):
    await admin_delete_account(ctx, email, accounts_mail, "Email", WRITE_MAIL_URL)

@bot.command(name="dellugphone", help="(Admin) X√≥a t√†i kho·∫£n UGPhone.")
async def dellugphone(ctx: commands.Context, email: str):
    await admin_delete_account(ctx, email, accounts_ug, "UGPhone", WRITE_UG_URL)

@bot.command(name="dellredfinger", help="(Admin) X√≥a t√†i kho·∫£n RedFonger.")
async def dellredfinger(ctx: commands.Context, email: str):
    await admin_delete_account(ctx, email, accounts_red, "RedFinger", WRITE_RED_URL)

@bot.command(name="delldcloud", help="(Admin) X√≥a t√†i kho·∫£n LD Cloud.")
async def delldcloud(ctx: commands.Context, email: str):
    await admin_delete_account(ctx, email, accounts_ld, "LD Cloud", WRITE_LD_URL)

@bot.command(name="deluglocal", help="(Admin) X√≥a ƒëo·∫°n code/t√†i kho·∫£n UGLocal.")
async def deluglocal(ctx: commands.Context, *, account_string: str): # D√πng *, ƒë·ªÉ l·∫•y c·∫£ chu·ªói d√†i
    await admin_delete_single_account(ctx, account_string, accounts_uglocal, "UGLocal", WRITE_UGLOCAL_URL)

# --- Qu·∫£n L√Ω Admin ---
@bot.command(name="setowner", help="(Admin) Th√™m m·ªôt ng∆∞·ªùi d√πng l√†m admin m·ªõi.")
async def setowner(ctx: commands.Context, user: discord.Member):
    if not is_admin(ctx.author.id):
        await ctx.send("B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y.")
        return
    
    user_id = user.id
    if user_id in admin_ids:
        await ctx.send(f"**{user.display_name}** ƒë√£ l√† admin r·ªìi.")
        return

    admin_ids.add(user_id)
    save_data_from_api(WRITE_ADMINS_URL, admin_ids)
    await ctx.send(f"**‚úÖ ƒê√£ th√™m {user.display_name} ({user_id}) l√†m admin.**")

@bot.command(name="delowner", help="(Admin) G·ª° m·ªôt ng∆∞·ªùi d√πng kh·ªèi danh s√°ch admin.")
async def delowner(ctx: commands.Context, user: discord.Member):
    if not is_admin(ctx.author.id):
        await ctx.send("B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y.")
        return
    
    user_id = user.id
    if user_id == MAIN_ADMIN_ID:
        await ctx.send("Kh√¥ng th·ªÉ g·ª° admin ch√≠nh.")
        return
    if user_id == ctx.author.id:
        await ctx.send("B·∫°n kh√¥ng th·ªÉ t·ª± g·ª° ch√≠nh m√¨nh.")
        return
    
    if user_id in admin_ids:
        admin_ids.remove(user_id)
        save_data_from_api(WRITE_ADMINS_URL, admin_ids)
        await ctx.send(f"**‚úÖ ƒê√£ g·ª° {user.display_name} ({user_id}) kh·ªèi danh s√°ch admin.**")
    else:
        await ctx.send(f"**{user.display_name}** kh√¥ng ph·∫£i l√† admin.")

@bot.command(name="listadmin", help="(Admin) Xem danh s√°ch admin hi·ªán t·∫°i.")
async def listadmin(ctx: commands.Context):
    if not is_admin(ctx.author.id):
        await ctx.send("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.")
        return
    
    if not admin_ids:
        await ctx.send("Hi·ªán kh√¥ng c√≥ admin n√†o ƒë∆∞·ª£c th√™m (ch·ªâ c√≥ admin ch√≠nh).")
        return

    admin_names = []
    for admin_id in admin_ids:
        try:
            member = ctx.guild.get_member(admin_id) if ctx.guild else None
            if member is None:
                member = await bot.fetch_user(admin_id)
            admin_names.append(f"- ``{member.display_name}`` (ID: ``{admin_id}``)")
        except discord.NotFound:
            admin_names.append(f"- Ng∆∞·ªùi d√πng kh√¥ng t√¨m th·∫•y (ID: ``{admin_id}``)")
        except Exception as e:
            admin_names.append(f"- L·ªói khi l·∫•y t√™n (ID: ``{admin_id}``): {e}")

    admins_list = "\n".join(admin_names)
    await ctx.send(f"**üìù Danh s√°ch admin:**\n{admins_list}")

# --- Ch·∫°y Bot ---
bot.run(os.environ["DISCORD_TOKEN"])
