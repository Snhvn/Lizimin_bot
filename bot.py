import discord
from discord.ext import commands
from discord import Embed, Colour
import requests
import time
import os
import json
import threading
from flask import Flask

# --- C·∫•u h√¨nh Bot Discord ---
intents = discord.Intents.default()
intents.message_content = True # R·∫•t quan tr·ªçng cho Prefix Commands
bot = commands.Bot(command_prefix="!", intents=intents) # ƒê·∫∑t prefix mong mu·ªën

# --- Web Server ƒë·ªÉ gi·ªØ Bot ho·∫°t ƒë·ªông ---
app = Flask(__name__)

@app.route("/")
def home():
    return "Bot is alive!"

def run_web_server():
    """Ch·∫°y web server trong m·ªôt thread ri√™ng."""
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 8080)), debug=False, use_reloader=False)

# Ch·∫°y web server trong thread ri√™ng
threading.Thread(target=run_web_server).start()

# --- C·∫•u h√¨nh API v√† URLs ---
API_TOKEN = os.environ.get('YEUMONEY_API_TOKEN', 'dfce079aa89e7256f53f6f2fe2328c128a584467f5afcbc5f5d451c581879768')
LINK_ORIGINAL = 'https://xumivnstore.site/callback.php'
HOSTING_BASE_URL = 'https://xumivnstore.site/'

# URLs cho Mail accounts
READ_MAIL_URL = HOSTING_BASE_URL + 'read_mail.php'
WRITE_MAIL_URL = HOSTING_BASE_URL + 'write_mail.php'

# URLs cho UG accounts
READ_UG_URL = HOSTING_BASE_URL + 'read_ug.php'
WRITE_UG_URL = HOSTING_BASE_URL + 'write_ug.php'

# URLs cho Red accounts
READ_RED_URL = HOSTING_BASE_URL + 'read_red.php'
WRITE_RED_URL = HOSTING_BASE_URL + 'write_red.php'

# URLs cho LD accounts
READ_LD_URL = HOSTING_BASE_URL + 'read_ld.php'
WRITE_LD_URL = HOSTING_BASE_URL + 'write_ld.php'

# URLs cho Admin IDs
READ_ADMINS_URL = HOSTING_BASE_URL + 'read_admins.php'
WRITE_ADMINS_URL = HOSTING_BASE_URL + 'write_admins.php'

# URLs cho Used Keys
READ_USED_KEYS_URL = HOSTING_BASE_URL + 'read_used_keys.php'
WRITE_USED_KEYS_URL = HOSTING_BASE_URL + 'write_used_keys.php'

# --- H√†m T·∫£i/L∆∞u D·ªØ li·ªáu t·ª´ API ---
def load_data_from_api(url, default_value_type):
    """T·∫£i d·ªØ li·ªáu (t√†i kho·∫£n ho·∫∑c ID) t·ª´ URL API."""
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()
        if default_value_type == dict:
            return data if isinstance(data, dict) else {}
        elif default_value_type == set:
            return set(data) if isinstance(data, list) else set()
    except requests.exceptions.RequestException as e:
        print(f"L·ªói khi t·∫£i d·ªØ li·ªáu t·ª´ {url}: {e}")
    except json.JSONDecodeError as e:
        print(f"L·ªói gi·∫£i m√£ JSON t·ª´ {url}: {e}")
    return default_value_type()

def save_data_to_api(url, data):
    """L∆∞u d·ªØ li·ªáu (t√†i kho·∫£n ho·∫∑c ID) v√†o URL API."""
    try:
        json_data = list(data) if isinstance(data, set) else data
        response = requests.post(url, json=json_data, timeout=10)
        response.raise_for_status()
        result = response.json()
        if result.get('status') != 'success':
            print(f"L·ªói khi l∆∞u d·ªØ li·ªáu v√†o {url}: {result.get('message', 'L·ªói kh√¥ng x√°c ƒë·ªãnh')}")
    except requests.exceptions.RequestException as e:
        print(f"L·ªói khi l∆∞u d·ªØ li·ªáu v√†o {url}: {e}")
    except json.JSONDecodeError as e:
        print(f"L·ªói gi·∫£i m√£ JSON khi l∆∞u v√†o {url}: {e}")

# --- Kh·ªüi t·∫°o D·ªØ li·ªáu To√†n c·ª•c ---
accounts_mail = load_data_from_api(READ_MAIL_URL, dict)
accounts_ug = load_data_from_api(READ_UG_URL, dict)
accounts_red = load_data_from_api(READ_RED_URL, dict)
accounts_ld = load_data_from_api(READ_LD_URL, dict)
admin_ids = load_data_from_api(READ_ADMINS_URL, set)
used_keys = load_data_from_api(READ_USED_KEYS_URL, set)

MAIN_ADMIN_ID = 1364169704943652924
if MAIN_ADMIN_ID not in admin_ids:
    admin_ids.add(MAIN_ADMIN_ID)
    save_data_from_api(WRITE_ADMINS_URL, admin_ids)

def is_admin(user_id):
    return user_id in admin_ids

# --- S·ª± ki·ªán Bot S·∫µn s√†ng ---
@bot.event
async def on_ready():
    print(f"Bot ƒë√£ ƒëƒÉng nh·∫≠p: {bot.user}")
    # Kh√¥ng c·∫ßn tree.sync() cho prefix commands
    await bot.change_presence(activity=discord.Game(name="Ph·ª•c v·ª• c·ªông ƒë·ªìng"))

# --- L·ªánh `!info` (Gi·ªõi thi·ªáu bot v√† c√°c l·ªánh) ---
@bot.command(name="info", help="Gi·ªõi thi·ªáu v·ªÅ bot v√† c√°c l·ªánh kh·∫£ d·ª•ng.")
async def info(ctx: commands.Context):
    is_admin_user = is_admin(ctx.author.id)

    description = (
        "**L·ªánh d√†nh cho ng∆∞·ªùi d√πng:**\n"
        "``!getkey`` - L·∫•y link key r√∫t g·ªçn ƒë·ªÉ nh·∫≠n t√†i kho·∫£n.\n"
        "``!gmail <key>`` - L·∫•y t√†i kho·∫£n Email.\n"
        "``!ugphone <key>`` - L·∫•y t√†i kho·∫£n UGPhone.\n"
        "``!redfinger <key>`` - L·∫•y t√†i kho·∫£n RedFinger.\n"
        "``!ldcloud <key>`` - L·∫•y t√†i kho·∫£n LD Cloud.\n"
    )
    if is_admin_user:
        description += (
            "\n**L·ªánh d√†nh cho Admin:**\n"
            "``!upgmail <email> <password>`` - Th√™m t√†i kho·∫£n Email.\n"
            "``!upugphone <email> <password>`` - Th√™m t√†i kho·∫£n UGPhone.\n"
            "``!upredfinger <email> <password>`` - Th√™m t√†i kho·∫£n RedFinger.\n"
            "``!upldcloud <email> <password>`` - Th√™m t√†i kho·∫£n LD Cloud.\n"
            "``!listgmail`` - Xem danh s√°ch t√†i kho·∫£n Email c√≤n l·∫°i.\n"
            "``!listugphone`` - Xem danh s√°ch t√†i kho·∫£n UGPhone c√≤n l·∫°i.\n"
            "``!listredfinger`` - Xem danh s√°ch t√†i kho·∫£n RedFinger c√≤n l·∫°i.\n"
            "``!listldcloud`` - Xem danh s√°ch t√†i kho·∫£n LD Cloud c√≤n l·∫°i.\n"
            "``!dellgmail <email>`` - X√≥a t√†i kho·∫£n Email.\n"
            "``!dellugphone <email>`` - X√≥a t√†i kho·∫£n UGPhone.\n"
            "``!dellredfinger <email>`` - X√≥a t√†i kho·∫£n RedFinger.\n"
            "``!delldcloud <email>`` - X√≥a t√†i kho·∫£n LD Cloud.\n"
            "``!setowner <user_mention_or_id>`` - Th√™m admin m·ªõi.\n"
            "``!delowner <user_mention_or_id>`` - G·ª° admin.\n"
            "``!listadmin`` - Xem danh s√°ch admin.\n"
        )
    embed = Embed(
        title="ü§ñ Th√¥ng tin Bot v√† C√°c L·ªánh",
        description=description,
        color=Colour(0xAA00FF)
    )
    embed.set_thumbnail(url=bot.user.avatar.url if bot.user.avatar else None)
    embed.set_image(url="https://i.imgur.com/WFeKMG6.gif")

    view = discord.ui.View()
    join_server_button = discord.ui.Button(
        label="Tham gia Server H·ªó Tr·ª£",
        style=discord.ButtonStyle.link,
        url="https://discord.gg/Rgr7vCXwu2"
    )
    view.add_item(join_server_button)

    await ctx.send(embed=embed, view=view)

# --- L·ªánh `!getkey` (L·∫•y link key) ---
@bot.command(name="getkey", help="L·∫•y link key r√∫t g·ªçn ƒë·ªÉ s·ª≠ d·ª•ng c√°c l·ªánh kh√°c.")
async def getkey(ctx: commands.Context):
    user_id = str(ctx.author.id)
    try:
        unique_link = f"{LINK_ORIGINAL}?uid={user_id}&t={int(time.time())}"
        encoded_link = requests.utils.quote(unique_link, safe='')
        api_url = f"https://yeumoney.com/QL_api.php?token={API_TOKEN}&url={encoded_link}&format=json"
        
        res = requests.get(api_url, timeout=10)
        res.raise_for_status()
        data = res.json()

        if data.get("status") == "success":
            short_url = data.get("shortenedUrl")
            if short_url:
                await ctx.send(
                    f"**üîó Link key r√∫t g·ªçn c·ªßa b·∫°n:**\n{short_url}\n"
                    f"Vui l√≤ng truy c·∫≠p link n√†y ƒë·ªÉ l·∫•y key v√† s·ª≠ d·ª•ng c√°c l·ªánh kh√°c."
                )
            else:
                await ctx.send(f"**L·ªói API:** Kh√¥ng nh·∫≠n ƒë∆∞·ª£c shortened URL.")
        else:
            await ctx.send(f"**L·ªói API:** {data.get('message', 'L·ªói kh√¥ng x√°c ƒë·ªãnh t·ª´ API r√∫t g·ªçn.')}")
    except requests.exceptions.RequestException as e:
        await ctx.send(f"**L·ªói k·∫øt n·ªëi API r√∫t g·ªçn:** Vui l√≤ng th·ª≠ l·∫°i sau. ({e})")
    except json.JSONDecodeError:
        await ctx.send(f"**L·ªói gi·∫£i m√£ d·ªØ li·ªáu t·ª´ API r√∫t g·ªçn.**")
    except Exception as e:
        await ctx.send(f"**L·ªói h·ªá th·ªëng kh√¥ng mong mu·ªën:** {e}")

# --- Ki·ªÉm tra Key H·ª£p L·ªá ---
async def check_key_valid(ctx: commands.Context, key: str) -> bool:
    """Ki·ªÉm tra xem key c√≥ h·ª£p l·ªá v√† ch∆∞a ƒë∆∞·ª£c s·ª≠ d·ª•ng kh√¥ng."""
    try:
        res = requests.get("https://xumivnstore.site/keys.json", timeout=10)
        res.raise_for_status()
        key_data = res.json()
    except requests.exceptions.RequestException as e:
        await ctx.send(f"L·ªói khi ki·ªÉm tra key t·ª´ m√°y ch·ªß: {e}")
        return False
    except json.JSONDecodeError as e:
        await ctx.send(f"L·ªói gi·∫£i m√£ JSON t·ª´ keys.json: {e}. Vui l√≤ng ki·ªÉm tra file keys.json tr√™n hosting.")
        return False

    if key not in key_data:
        await ctx.send(f"**Key `{key}` kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng t·ªìn t·∫°i.**")
        return False
    if key in used_keys:
        await ctx.send(f"**Key `{key}` ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ l·∫•y t√†i kho·∫£n kh√°c.**")
        return False
    return True

# --- H√†m C·∫•p T√†i Kho·∫£n Chung (D√†nh cho Ng∆∞·ªùi d√πng) ---
async def give_account(ctx: commands.Context, key: str, accounts_dict: dict, account_type: str, write_url: str):
    """C·∫•p m·ªôt t√†i kho·∫£n cho ng∆∞·ªùi d√πng n·∫øu key h·ª£p l·ªá v√† t√†i kho·∫£n c√≤n."""
    if not await check_key_valid(ctx, key):
        return

    if not accounts_dict:
        await ctx.send(f"**Kh√¥ng c√≤n t√†i kho·∫£n {account_type} ƒë·ªÉ c·∫•p.**")
        return
    
    try:
        email, password = accounts_dict.popitem()
        
        used_keys.add(key)
        save_data_from_api(WRITE_USED_KEYS_URL, used_keys)

        save_data_from_api(write_url, accounts_dict)
        
        await ctx.send(
            f"**‚úÖ T√†i kho·∫£n {account_type} cho key `{key}` c·ªßa b·∫°n:**\n"
            f"Email: ``{email}``\nM·∫≠t kh·∫©u: ``{password}``\n"
            f"H√£y ƒë·ªïi m·∫≠t kh·∫©u ngay sau khi nh·∫≠n ƒë∆∞·ª£c t√†i kho·∫£n ƒë·ªÉ b·∫£o m·∫≠t!"
        )
    except Exception as e:
        await ctx.send(f"**L·ªói khi c·∫•p t√†i kho·∫£n {account_type}:** {e}")

# --- ƒê·ªãnh nghƒ©a c√°c Prefix Command ƒë·ªÉ l·∫•y t√†i kho·∫£n ---
@bot.command(name="gmail", help="Nh·∫≠n t√†i kho·∫£n Email b·∫±ng key duy nh·∫•t.")
async def gmail(ctx: commands.Context, key: str):
    await give_account(ctx, key, accounts_mail, "Email", WRITE_MAIL_URL)

@bot.command(name="ugphone", help="Nh·∫≠n t√†i kho·∫£n UGPhone b·∫±ng key duy nh·∫•t.")
async def ugphone(ctx: commands.Context, key: str):
    await give_account(ctx, key, accounts_ug, "UGPhone", WRITE_UG_URL)

@bot.command(name="redfinger", help="Nh·∫≠n t√†i kho·∫£n RedFinger Cloud b·∫±ng key duy nh·∫•t.")
async def redfinger(ctx: commands.Context, key: str):
    await give_account(ctx, key, accounts_red, "RedFinger", WRITE_RED_URL)

@bot.command(name="ldcloud", help="Nh·∫≠n t√†i kho·∫£n LD Cloud b·∫±ng key duy nh·∫•t.")
async def ldcloud(ctx: commands.Context, key: str):
    await give_account(ctx, key, accounts_ld, "LD Cloud", WRITE_LD_URL)

# --- H√†m Upload T√†i Kho·∫£n Chung (D√†nh cho Admin) ---
async def admin_upload_account(ctx: commands.Context, email: str, password: str, accounts_dict: dict, account_type: str, write_url: str):
    """Th√™m t√†i kho·∫£n m·ªõi v√†o danh s√°ch."""
    if not is_admin(ctx.author.id):
        await ctx.send("B·∫°n kh√¥ng c√≥ quy·ªÅn d√πng l·ªánh n√†y.")
        return

    if email in accounts_dict:
        await ctx.send(f"**Email `{email}` ƒë√£ t·ªìn t·∫°i trong {account_type}.**")
        return
    
    accounts_dict[email] = password
    save_data_from_api(write_url, accounts_dict)
    await ctx.send(
        f"**‚úÖ ƒê√£ th√™m t√†i kho·∫£n {account_type}:**\nEmail: ``{email}``\nM·∫≠t kh·∫©u: ``{password}``"
    )

# --- ƒê·ªãnh nghƒ©a c√°c Prefix Command ƒë·ªÉ upload t√†i kho·∫£n (Admin) ---
@bot.command(name="upgmail", help="(Admin) Th√™m t√†i kho·∫£n Email m·ªõi.")
async def upgmail(ctx: commands.Context, email: str, password: str):
    await admin_upload_account(ctx, email, password, accounts_mail, "Email", WRITE_MAIL_URL)

@bot.command(name="upugphone", help="(Admin) Th√™m t√†i kho·∫£n UGPhone m·ªõi.")
async def upugphone(ctx: commands.Context, email: str, password: str):
    await admin_upload_account(ctx, email, password, accounts_ug, "UGPhone", WRITE_UG_URL)

@bot.command(name="upredfinger", help="(Admin) Th√™m t√†i kho·∫£n RedFinger m·ªõi.")
async def upredfinger(ctx: commands.Context, email: str, password: str):
    await admin_upload_account(ctx, email, password, accounts_red, "RedFinger", WRITE_RED_URL)

@bot.command(name="upldcloud", help="(Admin) Th√™m t√†i kho·∫£n LD Cloud m·ªõi.")
async def upldcloud(ctx: commands.Context, email: str, password: str):
    await admin_upload_account(ctx, email, password, accounts_ld, "LD Cloud", WRITE_LD_URL)

# --- H√†m List T√†i Kho·∫£n Chung (D√†nh cho Admin) ---
async def admin_list_accounts(ctx: commands.Context, accounts_dict: dict, account_type: str):
    """Li·ªát k√™ t·∫•t c·∫£ c√°c t√†i kho·∫£n c√≤n l·∫°i trong m·ªôt lo·∫°i c·ª• th·ªÉ."""
    if not is_admin(ctx.author.id):
        await ctx.send("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.")
        return

    if not accounts_dict:
        await ctx.send(f"**Kh√¥ng c√≤n t√†i kho·∫£n {account_type} n√†o.**")
        return
    
    message = f"**Danh s√°ch t√†i kho·∫£n {account_type} c√≤n l·∫°i ({len(accounts_dict)} t√†i kho·∫£n):**\n"
    current_length = len(message)
    max_length = 1900

    for email in accounts_dict:
        line = f"- ``{email}``\n"
        if current_length + len(line) > max_length:
            await ctx.send(message)
            message = line
            current_length = len(line)
        else:
            message += line
            current_length += len(line)
    
    if message:
        await ctx.send(message)

# --- ƒê·ªãnh nghƒ©a c√°c Prefix Command ƒë·ªÉ list t√†i kho·∫£n (Admin) ---
@bot.command(name="listgmail", help="(Admin) Xem danh s√°ch t√†i kho·∫£n Email c√≤n l·∫°i.")
async def listgmail(ctx: commands.Context):
    await admin_list_accounts(ctx, accounts_mail, "Email")

@bot.command(name="listugphone", help="(Admin) Xem danh s√°ch t√†i kho·∫£n UGPhone c√≤n l·∫°i.")
async def listugphone(ctx: commands.Context):
    await admin_list_accounts(ctx, accounts_ug, "UGPhone")

@bot.command(name="listredfinger", help="(Admin) Xem danh s√°ch t√†i kho·∫£n RedFinger c√≤n l·∫°i.")
async def listredfinger(ctx: commands.Context):
    await admin_list_accounts(ctx, accounts_red, "RedFinger")

@bot.command(name="listldcloud", help="(Admin) Xem danh s√°ch t√†i kho·∫£n LD Cloud c√≤n l·∫°i.")
async def listldcloud(ctx: commands.Context):
    await admin_list_accounts(ctx, accounts_ld, "LD Cloud")

# --- H√†m X√≥a T√†i Kho·∫£n Chung (D√†nh cho Admin) ---
async def admin_delete_account(ctx: commands.Context, email: str, accounts_dict: dict, account_type: str, write_url: str):
    """X√≥a m·ªôt t√†i kho·∫£n kh·ªèi danh s√°ch."""
    if not is_admin(ctx.author.id):
        await ctx.send("B·∫°n kh√¥ng c√≥ quy·ªÅn d√πng l·ªánh n√†y.")
        return

    if email not in accounts_dict:
        await ctx.send(f"**Email `{email}` kh√¥ng t·ªìn t·∫°i trong {account_type}.**")
        return
    
    del accounts_dict[email]
    save_data_from_api(write_url, accounts_dict)
    await ctx.send(
        f"**‚úÖ ƒê√£ x√≥a t√†i kho·∫£n {account_type} v·ªõi email ``{email}``.**"
    )

# --- ƒê·ªãnh nghƒ©a c√°c Prefix Command ƒë·ªÉ x√≥a t√†i kho·∫£n (Admin) ---
@bot.command(name="dellgmail", help="(Admin) X√≥a t√†i kho·∫£n Gmail.")
async def dellgmail(ctx: commands.Context, email: str):
    await admin_delete_account(ctx, email, accounts_mail, "Email", WRITE_MAIL_URL)

@bot.command(name="dellugphone", help="(Admin) X√≥a t√†i kho·∫£n UGPhone.")
async def dellugphone(ctx: commands.Context, email: str):
    await admin_delete_account(ctx, email, accounts_ug, "UGPhone", WRITE_UG_URL)

@bot.command(name="dellredfinger", help="(Admin) X√≥a t√†i kho·∫£n RedFinger.")
async def dellredfinger(ctx: commands.Context, email: str):
    await admin_delete_account(ctx, email, accounts_red, "RedFinger", WRITE_RED_URL)

@bot.command(name="delldcloud", help="(Admin) X√≥a t√†i kho·∫£n LD Cloud.")
async def delldcloud(ctx: commands.Context, email: str):
    await admin_delete_account(ctx, email, accounts_ld, "LD Cloud", WRITE_LD_URL)

# --- Qu·∫£n L√Ω Admin ---
@bot.command(name="setowner", help="(Admin) Th√™m m·ªôt ng∆∞·ªùi d√πng l√†m admin m·ªõi.")
async def setowner(ctx: commands.Context, user: discord.Member): # discord.Member t·ª± ƒë·ªông ph√¢n gi·∫£i t·ª´ mention/ID
    if not is_admin(ctx.author.id):
        await ctx.send("B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y.")
        return
    
    user_id = user.id
    if user_id in admin_ids:
        await ctx.send(f"**{user.display_name}** ƒë√£ l√† admin r·ªìi.")
        return

    admin_ids.add(user_id)
    save_data_from_api(WRITE_ADMINS_URL, admin_ids)
    await ctx.send(f"**‚úÖ ƒê√£ th√™m {user.display_name} ({user_id}) l√†m admin.**")

@bot.command(name="delowner", help="(Admin) G·ª° m·ªôt ng∆∞·ªùi d√πng kh·ªèi danh s√°ch admin.")
async def delowner(ctx: commands.Context, user: discord.Member):
    if not is_admin(ctx.author.id):
        await ctx.send("B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y.")
        return
    
    user_id = user.id
    if user_id == MAIN_ADMIN_ID:
        await ctx.send("Kh√¥ng th·ªÉ g·ª° admin ch√≠nh.")
        return
    if user_id == ctx.author.id:
        await ctx.send("B·∫°n kh√¥ng th·ªÉ t·ª± g·ª° ch√≠nh m√¨nh.")
        return
    
    if user_id in admin_ids:
        admin_ids.remove(user_id)
        save_data_from_api(WRITE_ADMINS_URL, admin_ids)
        await ctx.send(f"**‚úÖ ƒê√£ g·ª° {user.display_name} ({user_id}) kh·ªèi danh s√°ch admin.**")
    else:
        await ctx.send(f"**{user.display_name}** kh√¥ng ph·∫£i l√† admin.")

@bot.command(name="listadmin", help="(Admin) Xem danh s√°ch admin hi·ªán t·∫°i.")
async def listadmin(ctx: commands.Context):
    if not is_admin(ctx.author.id):
        await ctx.send("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.")
        return
    
    if not admin_ids:
        await ctx.send("Hi·ªán kh√¥ng c√≥ admin n√†o ƒë∆∞·ª£c th√™m (ch·ªâ c√≥ admin ch√≠nh).")
        return

    admin_names = []
    for admin_id in admin_ids:
        try:
            member = ctx.guild.get_member(admin_id) if ctx.guild else None
            if member is None:
                member = await bot.fetch_user(admin_id)
            admin_names.append(f"- ``{member.display_name}`` (ID: ``{admin_id}``)")
        except discord.NotFound:
            admin_names.append(f"- Ng∆∞·ªùi d√πng kh√¥ng t√¨m th·∫•y (ID: ``{admin_id}``)")
        except Exception as e:
            admin_names.append(f"- L·ªói khi l·∫•y t√™n (ID: ``{admin_id}``): {e}")

    admins_list = "\n".join(admin_names)
    await ctx.send(f"**üìù Danh s√°ch admin:**\n{admins_list}")

# --- Ch·∫°y Bot ---
bot.run(os.environ["DISCORD_TOKEN"])
